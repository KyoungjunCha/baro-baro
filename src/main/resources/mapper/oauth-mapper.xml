<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  interface UserMapper.java를 사용할 경우 -->
<mapper namespace="com.barobaro.app.mapper.UserMapper">

    <!-- ResultMap for user_table and user_detail -->
    <resultMap id="userResultMap" type="com.barobaro.app.vo.UsersTblVO">
        <id property="userSeq" 		column="user_seq" />
        <result property="email" 	column="email" />
        <result property="nickname" column="nickname" />
        <result property="phone" 	column="phone" />
        <result property="address" 	column="address" />
        <result property="regdate" 	column="regdate" />
        <result property="status" 	column="status" />
        <result property="role" 	column="role" />
        <association property="usersOauthVO" javaType="com.barobaro.app.vo.UsersOauthVO" resultMap="oauthResultMap"/>
        <collection property="postVO" javaType="List" resultMap="postResultMap"/>
    </resultMap>

<!--     <resultMap id="oauthResultMap" type="com.barobaro.app.vo.UsersOauthVO">
        <id property="userSeq" column="user_seq" />
        <result property="picture" column="picture" />
        <result property="accessToken" column="access_token" />
        <result property="refreshToken" column="refresh_token" />
        <result property="uptdate" column="uptdate" />
    </resultMap> -->
	    
    <resultMap id="oauthResultMap" type="com.barobaro.app.vo.UsersOauthVO">
        <id property="userSeq" 				column="user_seq" />
        <result property="userDetailSeq" 	column="user_detail_seq" />
        <result property="accessToken" 		column="access_token" />
		<result property="refreshToken" 	column="refresh_token" />
		<result property="regdate" 			column="regdate" />
    </resultMap>    
	

	<resultMap id="postResultMap" type="com.barobaro.app.vo.PostVO">
	    <id property="postSeq"			column="post_seq"/>
	    <result property="title" 		column="title"/>
	    <result property="itemContent" 	column="item_content"/>
	    <result property="rentContent" 	column="rent_content"/>
	    <result property="postAt" 		column="post_at"/>
	    <result property="count" 		column="count"/>
	    <result property="productName" 	column="product_name"/>
	    <result property="categoryName" 	column="categoryName"/>
	    <result property="userSeq" 		column="user_seq"/>
	</resultMap>
	
	
	<resultMap id="notificationResultMap" type="com.barobaro.app.vo.NotificationVO">
	    <id property="notificationSeq"				column="NOTIFICATION_SEQ"/>
	    <result property="notificationType" 		column="NOTIFICATION_TYPE"/>
	    <result property="title" 					column="TITLE"/>
	    <result property="contents" 				column="CONTENTS"/>
	    <result property="isRead" 					column="IS_READ"/>
	    <result property="createdAt" 				column="CREATED_AT"/>
	    <result property="link" 					column="LINK"/>
	    <result property="userSeq" 					column="USER_SEQ"/>
	</resultMap>
	
	
	<resultMap id="userReviewAnswerResultMap" type="com.barobaro.app.vo.UserReviewAnswerVO">
	    <id property="postSeq"						column="NOTIFICATION_SEQ"/>
	    <result property="title" 					column="NOTIFICATION_TYPE"/>
	    <result property="itemContent" 				column="TITLE"/>
	    <result property="rentContent" 				column="CONTENTS"/>
	    <result property="isRead" 					column="IS_READ"/>
	    <result property="createdAt" 				column="CREATED_AT"/>
	    <result property="link" 					column="LINK"/>
	    <result property="userSeq" 					column="USER_SEQ"/>
	</resultMap>
	
	
	<!-- 전체회원 조회 -->
    <select id="allUser" resultMap="userResultMap">
        select u.user_seq, u.email, u.nickname, u.phone, u.address, u.regdate, u.status, u.role,
               o.access_token, o.refresh_token
        from user_table u
        left join user_detail o on u.user_seq = o.user_seq
    </select>
    
	
    
    <!-- 내가 쓴 글 전체 조회 -->
 	<select id="allPosts" resultMap = "postResultMap">
		select user_seq, post_seq, title, item_content, rent_content, post_at, count, product_name, (SELECT 
			CATEGORY_NAME 
			FROM category cn
			WHERE cn.category_seq = p.category_seq
			) AS categoryName
		from post p
		where user_seq = #{userSeq}
    </select>
    
    <!-- 내 알림 전체 조회 -->
    <select id= "allNotifications" resultMap = "notificationResultMap">
		select user_seq, post_seq, title, item_content, rent_content, post_at, count, product_name, (SELECT 
			CATEGORY_NAME 
			FROM category cn
			WHERE cn.category_seq = p.category_seq
			) AS categoryName
		from post p
		where user_seq = #{userSeq}
    </select>
    
    
    <!-- 내 리뷰 전체 조회 -->
    <select id= "allAnswers" resultMap = "notificationResultMap">
		select user_seq, post_seq, title, item_content, rent_content, post_at, count, product_name, (SELECT 
			CATEGORY_NAME 
			FROM category cn
			WHERE cn.category_seq = p.category_seq
			) AS categoryName
		from post p
		where user_seq = #{userSeq}
    </select>
    
    
    <!-- 관리자 유저 권한 상태 -->
    <update id="updateAdminUsersTbl" parameterType="com.barobaro.app.vo.UsersTblVO">
        update user_table 
        set role=#{role} ,status = #{status}
        where user_seq=#{userSeq}
    </update>
	
	
	
	<!-- 가입유저 주소, 전화번호 변경 -->
    <update id="updateUsersTbl" parameterType="com.barobaro.app.vo.UsersTblVO">
        update user_table 
        set phone=#{phone} ,address = #{address}
        where email=#{email}
    </update>
	
	<!-- 회원탈퇴 -->
    <delete id="userDelete" parameterType="int">
        delete from user_detail where user_seq=#{userSeq};
        delete from user_table where user_seq=#{userSeq};
    </delete>

<!--     일반회원 로그인
    <select id="formLogin" parameterType="com.barobaro.app.vo.UsersTblVO" resultMap="userResultMap">
        select * from user_table where email=#{email} and user_pw=#{userPw}
    </select> -->
	
	<!-- 일반회원 회원가입 -->
    <!-- <insert id="formJoin" parameterType="com.barobaro.app.vo.UsersTblVO">
        INSERT INTO user_table (
            user_seq, email, user_pw, user_name, nickname, phone, address, status, role, provider
        ) VALUES (
            user_table_seq.nextval, #{email}, #{userPw}, #{userName}, #{nickname}, #{phone}, #{address}, #{status}, #{role}, #{provider}
        )
    </insert> -->

    <!-- OAuth :: 기존회원/신규회원 구분을 위한 DB조회 -->
    <select id="findUserByEmail" parameterType="String" resultMap="userResultMap">
        SELECT * FROM user_table WHERE email = #{email}
    </select>
    
    <select id="findUserByNickname" parameterType="String" resultMap="userResultMap">
        SELECT * FROM user_table WHERE nickname = #{nickname}
    </select>

    <!-- OAuth/일반유저 :: 신규회원 회원가입 시 회원정보 저장 -->
    <insert id="insertUsersTbl" parameterType="com.barobaro.app.vo.UsersTblVO" useGeneratedKeys="false">
        <selectKey keyProperty="userSeq" resultType="int" order="BEFORE">
            SELECT user_table_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO user_table (
            user_seq, email, nickname, phone, address, status, role, provider, profile_image
        ) VALUES (
            #{userSeq}, #{email}, #{nickname}, #{phone}, #{address}, #{status}, #{role}, #{provider}, #{profile_image}
        )
    </insert>

    <!-- OAuth :: 신규회원 토큰저장 -->
    <!-- <insert id="insertUsersOauthTbl" parameterType="com.barobaro.app.vo.UsersOauthVO">
        INSERT INTO user_detail (
            user_seq, picture, access_token, refresh_token
        ) VALUES (
            #{userSeq}, #{picture}, #{accessToken}, #{refreshToken}
        )
    </insert> -->
    
    <insert id="insertUsersOauthTbl" parameterType="com.barobaro.app.vo.UsersOauthVO" useGeneratedKeys="false">
        <selectKey keyProperty="userSeq" resultType="int" order="BEFORE">
            SELECT user_detail_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO user_detail (
            user_detail_seq, user_seq, access_token, refresh_token
        ) VALUES (
            #{userDetailSeq}, #{userSeq}, #{accessToken}, #{refreshToken}
        )
    </insert>

    <!-- OAuth :: 기존회원:토큰갱신 -->
    <update id="updateUserOauthTbl" parameterType="com.barobaro.app.vo.UsersOauthVO">
        UPDATE user_detail
        SET access_token=#{accessToken}, refresh_token=#{refreshToken}
        WHERE user_seq=#{userSeq}
    </update>

</mapper>


  