<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  interface UserMapper.java를 사용할 경우 -->
<mapper namespace="com.barobaro.app.mapper.UserMapper">

    <!-- ResultMap for users_tbl and users_oauth -->
    <resultMap id="userResultMap" type="com.barobaro.app.vo.UsersTblVO">
        <id property="userSeq" 			column="user_seq" />
        <result property="userEmail" 	column="user_email" />
        <result property="userPw" 		column="user_pw" />
        <result property="userName" 	column="user_name" />
        <result property="userGubun" 	column="user_gubun" />
        <result property="regdate" 		column="regdate" />
        <result property="provider" 	column="provider" />
        <association property="usersOauthVO" javaType="com.barobaro.app.vo.UsersOauthVO" resultMap="oauthResultMap"/>
    </resultMap>
	<resultMap id="oauthResultMap" type="com.barobaro.app.vo.UsersOauthVO">
	        <id property="userSeq" 				column="user_seq" />
	        <result property="picture" 			column="picture" />
	        <result property="access_token" 	column="accessToken" />
	        <result property="refresh_token" 	column="refreshToken" />
	        <result property="uptdate" 			column="uptdate" />
	    </resultMap>
	    
	<!-- 전체회원 조회 -->  
	<select id="allUser"   resultMap="userResultMap">
		select u.user_seq, u.user_email, u.user_pw, u.user_name, u.user_gubun, u.regdate, u.provider
		, o.picture, o.access_token, o.refresh_token
		from users_tbl u, users_oauth o
		where u.user_seq = o.user_seq(+)
	</select>
	
	<!-- 일반유저 :: 비밀번호 변경  -->
	<update id="updateUsersTbl" parameterType="com.barobaro.app.vo.UsersTblVO">
		update users_tbl set user_pw=#{userPw} where user_email=#{userEmail}
	</update>
	
	<!-- 회원탈퇴 --> 
	<delete id="userDelete" parameterType="int">
        delete from users_oauth where user_seq=#{userSeq};
        delete from users_tbl   where user_seq=#{userSeq};
    </delete>
	
	<!-- 일반회원 로그인 -->    
	<select id="formLogin" parameterType="com.barobaro.app.vo.UsersTblVO" resultMap="userResultMap">
		select * from users_tbl where user_email=#{userEmail} and user_pw=#{userPw}
	</select>
	
	<!-- 일반회원 회원가입 -->
	<insert id="formJoin" parameterType="com.barobaro.app.vo.UsersTblVO">
		 INSERT INTO users_tbl (
            user_seq, user_email, user_pw, user_name, provider
        ) VALUES (
            users_tbl_seq.nextval, #{userEmail}, #{userPw}, #{userName}, #{provider}
        )
	</insert>
	
	<!-- OAuth :: 기존회원/신규회원 구분을 위한 DB조회 -->
	<select id="findUserByEmail" parameterType="String"  resultMap="userResultMap">
		SELECT * FROM users_tbl WHERE user_email = #{userEmail}
	</select>
	
    <!-- OAuth/일반유저 :: 신규회원 회원가입 시 회원정보 저장  -->
    <insert id="insertUsersTbl" parameterType="com.barobaro.app.vo.UsersTblVO" useGeneratedKeys="false">
        <selectKey keyProperty="userSeq" resultType="int" order="BEFORE">
            SELECT users_tbl_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO users_tbl (
            user_seq, user_email, user_pw, user_name, provider
        ) VALUES (
            #{userSeq}, #{userEmail}, #{userPw}, #{userName}, #{provider}
        )
    </insert>
    
    
    <!-- OAuth :: 신규회원 토큰저장  -->
    <insert id="insertUsersOauthTbl" parameterType="com.barobaro.app.vo.UsersOauthVO">
        INSERT INTO users_oauth (
            user_seq, picture, access_token, refresh_token
        ) VALUES (
            #{userSeq}, #{picture}, #{accessToken}, #{refreshToken}
        )
    </insert>
     
    <!-- OAuth :: 기존회원:토큰갱신  -->
	<update id="updateUserOauthTbl" parameterType="com.barobaro.app.vo.UsersOauthVO">
		UPDATE users_oauth 
		SET picture=#{picture}, access_token = #{accessToken}, refresh_token = #{refreshToken} 
		WHERE user_seq = #{userSeq} 
	</update>
	
</mapper>


  